Q1. Write a Java Program to implement Factory method for Pizza Store with createPizza(),
orederPizza(), prepare(), Bake(), cut(), box(). Use this to create variety of pizzaâ€™s
like NyStyleCheesePizza, ChicagoStyleCheesePizza etc.

pizzaapp
|-- src
|   `-- main
|       `-- java
|           |-- com
|           |   `-- example
|           |       `-- pizza
|           |           |-- Pizza.java
|           |           |-- NyStyleCheesePizza.java
|           |           |-- ChicagoStyleCheesePizza.java
|           |           |-- PizzaStore.java
|           |           |-- NyPizzaStore.java
|           |           |-- ChicagoPizzaStore.java
|           |           `-- PizzaFactoryMethodExample.java
|-- target
|-- .gitignore
|-- pom.xml



// Pizza interface
interface Pizza {
    void prepare();
    void bake();
    void cut();
    void box();
}

// Concrete implementation of NyStyleCheesePizza
class NyStyleCheesePizza implements Pizza {
    @Override
    public void prepare() {
        System.out.println("Preparing NY style cheese pizza");
    }

    @Override
    public void bake() {
        System.out.println("Baking NY style cheese pizza");
    }

    @Override
    public void cut() {
        System.out.println("Cutting NY style cheese pizza");
    }

    @Override
    public void box() {
        System.out.println("Boxing NY style cheese pizza");
    }
}

// Concrete implementation of ChicagoStyleCheesePizza
class ChicagoStyleCheesePizza implements Pizza {
    @Override
    public void prepare() {
        System.out.println("Preparing Chicago style cheese pizza");
    }

    @Override
    public void bake() {
        System.out.println("Baking Chicago style cheese pizza");
    }

    @Override
    public void cut() {
        System.out.println("Cutting Chicago style cheese pizza");
    }

    @Override
    public void box() {
        System.out.println("Boxing Chicago style cheese pizza");
    }
}

// PizzaStore class with Factory Method
abstract class PizzaStore {
    // Factory Method
    abstract Pizza createPizza(String type);

    // Order pizza
    public Pizza orderPizza(String type) {
        Pizza pizza = createPizza(type);

        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();

        return pizza;
    }
}

// Concrete implementation of PizzaStore for NY style pizza
class NyPizzaStore extends PizzaStore {
    @Override
    Pizza createPizza(String type) {
        if (type.equals("cheese")) {
            return new NyStyleCheesePizza();
        }
        // Add more pizza types as needed
        return null;
    }
}

// Concrete implementation of PizzaStore for Chicago style pizza
class ChicagoPizzaStore extends PizzaStore {
    @Override
    Pizza createPizza(String type) {
        if (type.equals("cheese")) {
            return new ChicagoStyleCheesePizza();
        }
        // Add more pizza types as needed
        return null;
    }
}

// Main class to run the program
public class PizzaFactoryMethodExample {
    public static void main(String[] args) {
        PizzaStore nyPizzaStore = new NyPizzaStore();
        PizzaStore chicagoPizzaStore = new ChicagoPizzaStore();

        Pizza nyCheesePizza = nyPizzaStore.orderPizza("cheese");
        System.out.println();

        Pizza chicagoCheesePizza = chicagoPizzaStore.orderPizza("cheese");
    }
}






Q2. Write a python program to implement Naive Bayes.

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report
from sklearn import datasets

# Load the Iris dataset
iris = datasets.load_iris()
X = iris.data
y = iris.target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Naive Bayes classifier
classifier = GaussianNB()

# Train the classifier on the training set
classifier.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = classifier.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Display classification report
print('Classification Report:')
print(classification_report(y_test, y_pred))







Q3. Design a Django application that adds web pages with views and templates. 

To design a Django application that includes web pages with views and templates, you can follow these steps. In this example, let's create a simple Django app named `myapp` with a home page and a contact page.

### Step 1: Create a Django Project

Open a terminal and run the following commands to create a new Django project:

```bash
django-admin startproject myproject
cd myproject
```

### Step 2: Create a Django App

Inside your Django project, create a new app:

```bash
python manage.py startapp myapp
```

### Step 3: Define Views

Edit `myapp/views.py` to define your views:

```python
# myapp/views.py
from django.shortcuts import render
from django.http import HttpResponse

def home(request):
    return render(request, 'myapp/home.html')

def contact(request):
    return render(request, 'myapp/contact.html')
```

### Step 4: Create Templates

Create a `templates` folder inside your `myapp` folder. Inside this folder, create two HTML files: `home.html` and `contact.html`.

```html
<!-- myapp/templates/myapp/home.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home Page</title>
</head>
<body>
    <h1>Welcome to the Home Page</h1>
    <p>This is a simple Django application.</p>
</body>
</html>
```

```html
<!-- myapp/templates/myapp/contact.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contact Page</title>
</head>
<body>
    <h1>Contact Us</h1>
    <p>Feel free to reach out to us!</p>
</body>
</html>
```

### Step 5: Configure URLs

Configure URLs in `myapp/urls.py`:

```python
# myapp/urls.py
from django.urls import path
from .views import home, contact

urlpatterns = [
    path('', home, name='home'),
    path('contact/', contact, name='contact'),
]
```

### Step 6: Include App URLs in Project URLs

Include your app URLs in the project's `urls.py`:

```python
# myproject/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myapp.urls')),
]
```

### Step 7: Run the Development Server

Run the development server using the following command:

```bash
python manage.py runserver
```

Visit `http://127.0.0.1:8000/` in your web browser for the home page and `http://127.0.0.1:8000/contact/` for the contact page.

This is a basic example, and you can extend it by adding more views, templates, and functionalities to your Django application.