Q1. Write a Java Program to implement State Pattern for Gumball Machine.
Create instance variable that holds current state from there, we just need to handle all
actions, behaviors and state transition that can happen

// State interface
interface State {
    void insertQuarter();
    void ejectQuarter();
    void turnCrank();
    void dispense();
}

// Concrete state - NoQuarterState
class NoQuarterState implements State {
    private GumballMachine gumballMachine;

    public NoQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    @Override
    public void insertQuarter() {
        System.out.println("You inserted a quarter");
        gumballMachine.setState(gumballMachine.getHasQuarterState());
    }

    @Override
    public void ejectQuarter() {
        System.out.println("You haven't inserted a quarter");
    }

    @Override
    public void turnCrank() {
        System.out.println("You turned but there's no quarter");
    }

    @Override
    public void dispense() {
        System.out.println("You need to pay first");
    }
}

// Concrete state - HasQuarterState
class HasQuarterState implements State {
    private GumballMachine gumballMachine;

    public HasQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    @Override
    public void insertQuarter() {
        System.out.println("You can't insert another quarter");
    }

    @Override
    public void ejectQuarter() {
        System.out.println("Quarter returned");
        gumballMachine.setState(gumballMachine.getNoQuarterState());
    }

    @Override
    public void turnCrank() {
        System.out.println("You turned...");
        gumballMachine.setState(gumballMachine.getSoldState());
    }

    @Override
    public void dispense() {
        System.out.println("No gumball dispensed");
    }
}

// Concrete state - SoldState
class SoldState implements State {
    private GumballMachine gumballMachine;

    public SoldState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    @Override
    public void insertQuarter() {
        System.out.println("Please wait, we're already giving you a gumball");
    }

    @Override
    public void ejectQuarter() {
        System.out.println("Sorry, you already turned the crank");
    }

    @Override
    public void turnCrank() {
        System.out.println("Turning twice doesn't get you another gumball!");
    }

    @Override
    public void dispense() {
        System.out.println("A gumball comes rolling out...");
        gumballMachine.releaseBall();

        if (gumballMachine.getCount() > 0) {
            gumballMachine.setState(gumballMachine.getNoQuarterState());
        } else {
            System.out.println("Oops, out of gumballs!");
            gumballMachine.setState(gumballMachine.getSoldOutState());
        }
    }
}

// Concrete state - SoldOutState
class SoldOutState implements State {
    private GumballMachine gumballMachine;

    public SoldOutState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    @Override
    public void insertQuarter() {
        System.out.println("Sorry, the machine is sold out");
    }

    @Override
    public void ejectQuarter() {
        System.out.println("Sorry, the machine is sold out");
    }

    @Override
    public void turnCrank() {
        System.out.println("Sorry, the machine is sold out");
    }

    @Override
    public void dispense() {
        System.out.println("Sorry, the machine is sold out");
    }
}

// Context class - GumballMachine
class GumballMachine {
    private State noQuarterState;
    private State hasQuarterState;
    private State soldState;
    private State soldOutState;

    private State currentState;
    private int count = 0;

    public GumballMachine(int numGumballs) {
        noQuarterState = new NoQuarterState(this);
        hasQuarterState = new HasQuarterState(this);
        soldState = new SoldState(this);
        soldOutState = new SoldOutState(this);

        this.count = numGumballs;

        if (numGumballs > 0) {
            currentState = noQuarterState;
        } else {
            currentState = soldOutState;
        }
    }

    public void insertQuarter() {
        currentState.insertQuarter();
    }

    public void ejectQuarter() {
        currentState.ejectQuarter();
    }

    public void turnCrank() {
        currentState.turnCrank();
        currentState.dispense();
    }

    public void releaseBall() {
        System.out.println("A gumball is rolling out...");
        if (count != 0) {
            count--;
        }
    }

    public void setState(State state) {
        this.currentState = state;
    }

    public State getNoQuarterState() {
        return noQuarterState;
    }

    public State getHasQuarterState() {
        return hasQuarterState;
    }

    public State getSoldState() {
        return soldState;
    }

    public State getSoldOutState() {
        return soldOutState;
    }

    public int getCount() {
        return count;
    }
}

// Client code to test the Gumball Machine with State Pattern
public class GumballMachineTest {
    public static void main(String[] args) {
        GumballMachine gumballMachine = new GumballMachine(5);

        gumballMachine.insertQuarter();
        gumballMachine.turnCrank();

        gumballMachine.insertQuarter();
        gumballMachine.ejectQuarter();
        gumballMachine.turnCrank();

        gumballMachine.insertQuarter();
        gumballMachine.turnCrank();
        gumballMachine.insertQuarter();
        gumballMachine.turnCrank();

        gumballMachine.insertQuarter();
        gumballMachine.turnCrank();
        gumballMachine.insertQuarter();
        gumballMachine.turnCrank();
    }
}




Q2. Write a python program to implement Decision Tree whether or not to play Tennis.

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics

# Sample dataset for playing tennis
# Each tuple represents (Outlook, Temperature, Humidity, Wind, Play Tennis)
tennis_data = [
    ('Sunny', 'Hot', 'High', 'Weak', 'No'),
    ('Sunny', 'Hot', 'High', 'Strong', 'No'),
    ('Overcast', 'Hot', 'High', 'Weak', 'Yes'),
    ('Rain', 'Mild', 'High', 'Weak', 'Yes'),
    ('Rain', 'Cool', 'Normal', 'Weak', 'Yes'),
    ('Rain', 'Cool', 'Normal', 'Strong', 'No'),
    ('Overcast', 'Cool', 'Normal', 'Strong', 'Yes'),
    ('Sunny', 'Mild', 'High', 'Weak', 'No'),
    ('Sunny', 'Cool', 'Normal', 'Weak', 'Yes'),
    ('Rain', 'Mild', 'Normal', 'Weak', 'Yes'),
    ('Sunny', 'Mild', 'Normal', 'Strong', 'Yes'),
    ('Overcast', 'Mild', 'High', 'Strong', 'Yes'),
    ('Overcast', 'Hot', 'Normal', 'Weak', 'Yes'),
    ('Rain', 'Mild', 'High', 'Strong', 'No')
]

# Convert categorical data to numerical data
outlook_mapping = {'Sunny': 0, 'Overcast': 1, 'Rain': 2}
temperature_mapping = {'Hot': 0, 'Mild': 1, 'Cool': 2}
humidity_mapping = {'High': 0, 'Normal': 1}
wind_mapping = {'Weak': 0, 'Strong': 1}
play_tennis_mapping = {'No': 0, 'Yes': 1}

tennis_data_numeric = [
    (outlook_mapping[outlook], temperature_mapping[temp], humidity_mapping[humidity], wind_mapping[wind], play_tennis_mapping[play])
    for outlook, temp, humidity, wind, play in tennis_data
]

# Separate features and target variable
X = [data[:-1] for data in tennis_data_numeric]
y = [data[-1] for data in tennis_data_numeric]

# Split the dataset into a training set and a test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Decision Tree classifier
clf = DecisionTreeClassifier()

# Train the classifier
clf.fit(X_train, y_train)

# Make predictions on the test set
y_pred = clf.predict(X_test)

# Evaluate the performance
accuracy = metrics.accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Example prediction
new_data = [
    ('Sunny', 'Cool', 'High', 'Weak')
]

# Convert new data to numerical format
new_data_numeric = [
    (outlook_mapping[outlook], temperature_mapping[temp], humidity_mapping[humidity], wind_mapping[wind])
    for outlook, temp, humidity, wind in new_data
]

# Make predictions on the new data
predictions = clf.predict(new_data_numeric)

print('\nExample Prediction:')
for data, prediction in zip(new_data, predictions):
    print(f'Data: {data} => Prediction: {"Yes" if prediction == 1 else "No"}')




Q3. Create a Node.js file that demonstrates create database and table in MySQL.
const mysql = require('mysql');

// Create a connection to the MySQL server
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'your_username', // replace with your MySQL username
  password: 'your_password', // replace with your MySQL password
});

// Connect to MySQL server
connection.connect((err) => {
  if (err) {
    console.error('Error connecting to MySQL:', err.message);
    return;
  }

  console.log('Connected to MySQL server');

  // Create a new database
  connection.query('CREATE DATABASE IF NOT EXISTS mydatabase', (err) => {
    if (err) {
      console.error('Error creating database:', err.message);
      connection.end();
      return;
    }

    console.log('Database "mydatabase" created');

    // Use the created database
    connection.query('USE mydatabase', (err) => {
      if (err) {
        console.error('Error using database:', err.message);
        connection.end();
        return;
      }

      console.log('Using database "mydatabase"');

      // Create a new table
      const createTableQuery = `
        CREATE TABLE IF NOT EXISTS users (
          id INT AUTO_INCREMENT PRIMARY KEY,
          username VARCHAR(255) NOT NULL,
          email VARCHAR(255) NOT NULL
        )
      `;

      connection.query(createTableQuery, (err) => {
        if (err) {
          console.error('Error creating table:', err.message);
          connection.end();
          return;
        }

        console.log('Table "users" created');

        // Insert some dummy data into the table
        const insertDataQuery = `
          INSERT INTO users (username, email)
          VALUES
            ('john_doe', 'john@example.com'),
            ('jane_doe', 'jane@example.com')
        `;

        connection.query(insertDataQuery, (err) => {
          if (err) {
            console.error('Error inserting data:', err.message);
            connection.end();
            return;
          }

          console.log('Data inserted into the "users" table');

          // Close the MySQL connection
          connection.end((err) => {
            if (err) {
              console.error('Error closing connection:', err.message);
              return;
            }

            console.log('Connection closed');
          });
        });
      });
    });
  });
});
