Q1. Write a JAVA Program to implement built-in support (java.util.Observable) Weather
station with members temperature, humidity, pressure and methods
mesurmentsChanged(), setMesurment(), getTemperature(), getHumidity(),
getPressure() 


import java.util.Observable;
import java.util.Observer;

// WeatherData class extends Observable
class WeatherData extends Observable {
    private float temperature;
    private float humidity;
    private float pressure;

    // Method to notify observers when measurements change
    public void measurementsChanged() {
        setChanged();  // Marks this Observable object as having been changed
        notifyObservers();  // Notifies all registered observers
    }

    // Setter method for measurements
    public void setMeasurements(float temperature, float humidity, float pressure) {
        this.temperature = temperature;
        this.humidity = humidity;
        this.pressure = pressure;
        measurementsChanged();  // Notify observers when measurements are updated
    }

    // Getter methods for temperature, humidity, and pressure
    public float getTemperature() {
        return temperature;
    }

    public float getHumidity() {
        return humidity;
    }

    public float getPressure() {
        return pressure;
    }
}

// DisplayElement interface for display elements (observers)
interface DisplayElement {
    void display();
}

// CurrentConditionsDisplay class implements Observer and DisplayElement
class CurrentConditionsDisplay implements Observer, DisplayElement {
    private float temperature;
    private float humidity;

    // Constructor with Observable parameter
    public CurrentConditionsDisplay(Observable observable) {
        observable.addObserver(this);  // Register as an observer
    }

    // Update method called when the Observable's state changes
    @Override
    public void update(Observable o, Object arg) {
        if (o instanceof WeatherData) {
            WeatherData weatherData = (WeatherData) o;
            this.temperature = weatherData.getTemperature();
            this.humidity = weatherData.getHumidity();
            display();
        }
    }

    // Display method to show current conditions
    @Override
    public void display() {
        System.out.println("Current conditions: " + temperature + "F degrees and " + humidity + "% humidity");
    }
}

// Main class to run the program
public class WeatherStation {
    public static void main(String[] args) {
        WeatherData weatherData = new WeatherData();

        CurrentConditionsDisplay currentDisplay = new CurrentConditionsDisplay(weatherData);

        // Simulate weather measurements changes
        weatherData.setMeasurements(80, 65, 30.4f);
        weatherData.setMeasurements(82, 70, 29.2f);
        weatherData.setMeasurements(78, 90, 29.2f);
    }
}






Q2. Write a python program to implement Polynomial Linear Regression for given dataset

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Generate some sample data for illustration
np.random.seed(42)
X = 2 * np.random.rand(100, 1)
y = 3 * X**2 + 5 * X + 2 + np.random.randn(100, 1)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Polynomial features transformation
degree = 2  # Degree of the polynomial
poly_features = PolynomialFeatures(degree=degree, include_bias=False)
X_train_poly = poly_features.fit_transform(X_train)

# Create a linear regression model
model = LinearRegression()

# Train the model on the polynomial features
model.fit(X_train_poly, y_train)

# Make predictions on the training set
y_train_pred = model.predict(X_train_poly)

# Evaluate the model on the training set
mse_train = mean_squared_error(y_train, y_train_pred)
print(f'Mean Squared Error on Training Set: {mse_train}')

# Plot the training set and the regression line
plt.scatter(X_train, y_train, label='Training Set')
plt.plot(np.sort(X_train, axis=0), np.sort(y_train_pred, axis=0), color='red', label='Polynomial Regression')
plt.xlabel('X')
plt.ylabel('y')
plt.title(f'Polynomial Linear Regression (Degree {degree})')
plt.legend()
plt.show()








Q3. Create your Django app in which after running the server, you should see on the browser,
the text “Hello! I am learning Django”, which you defined in the index view


Install Django:
Ensure you have Django installed. If not, you can install it using:

bash

pip install django

Create a new Django project:
Open a terminal and run the following commands:

bash

django-admin startproject myproject
cd myproject

Create a Django app:
Create a new app within your project:

bash

python manage.py startapp myapp

Define the view:
Open the views.py file inside the myapp directory and define a simple view:

python

# myapp/views.py
from django.shortcuts import render
from django.http import HttpResponse

def index(request):
    return HttpResponse("Hello! I am learning Django")

Configure the URL:
Create a urls.py file inside the myapp directory and configure the URL for the view:

python

# myapp/urls.py
from django.urls import path
from .views import index

urlpatterns = [
    path('', index, name='index'),
]

Include the app's URLs in the project:
Open the urls.py file inside the myproject directory and include the app's URLs:

python

# myproject/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myapp.urls')),
]

Run the server:
Run the development server:

bash

python manage.py runserver

Visit http://127.0.0.1:8000/ in your web browser, and you should see the text "Hello! I am learning Django" displayed.

