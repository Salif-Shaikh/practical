Q1. Write a Java Program to implement Abstract Factory Pattern for Shape interface

// Shape interface
interface Shape {
    void draw();
}

// Concrete implementations of Shape

class Circle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing Circle");
    }
}

class Rectangle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing Rectangle");
    }
}

class Square implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing Square");
    }
}

// Abstract Factory interface
interface ShapeFactory {
    Shape createShape();
}

// Concrete implementations of ShapeFactory

class CircleFactory implements ShapeFactory {
    @Override
    public Shape createShape() {
        return new Circle();
    }
}

class RectangleFactory implements ShapeFactory {
    @Override
    public Shape createShape() {
        return new Rectangle();
    }
}

class SquareFactory implements ShapeFactory {
    @Override
    public Shape createShape() {
        return new Square();
    }
}

// Client code using the Abstract Factory

public class AbstractFactoryExample {
    public static void main(String[] args) {
        // Create a factory for circles
        ShapeFactory circleFactory = new CircleFactory();
        // Use the factory to create a circle
        Shape circle = circleFactory.createShape();
        // Draw the circle
        circle.draw();

        // Create a factory for rectangles
        ShapeFactory rectangleFactory = new RectangleFactory();
        // Use the factory to create a rectangle
        Shape rectangle = rectangleFactory.createShape();
        // Draw the rectangle
        rectangle.draw();

        // Create a factory for squares
        ShapeFactory squareFactory = new SquareFactory();
        // Use the factory to create a square
        Shape square = squareFactory.createShape();
        // Draw the square
        square.draw();
    }
}





Q2. Write a python program to implement Polynomial Linear Regression for given dataset

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Sample dataset with one feature and a target variable
np.random.seed(42)
X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + 1.5 * X**2 + np.random.randn(100, 1)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create polynomial features
degree = 2  # Degree of the polynomial
poly_features = PolynomialFeatures(degree=degree, include_bias=False)
X_train_poly = poly_features.fit_transform(X_train)

# Create and train a Polynomial Regression model
poly_model = LinearRegression()
poly_model.fit(X_train_poly, y_train)

# Make predictions on the training set
y_train_pred = poly_model.predict(X_train_poly)

# Evaluate the model on the training set
mse_train = mean_squared_error(y_train, y_train_pred)
r2_train = r2_score(y_train, y_train_pred)

# Print model parameters
print("Model Coefficients:", poly_model.coef_)
print("Model Intercept:", poly_model.intercept_)
print("Mean Squared Error (Training):", mse_train)
print("R-squared (Training):", r2_train)

# Visualize the polynomial regression line
X_new = np.linspace(0, 2, 100).reshape(-1, 1)
X_new_poly = poly_features.transform(X_new)
y_new = poly_model.predict(X_new_poly)

# Plot the original data and the polynomial regression line
plt.scatter(X, y, label='Original Data')
plt.plot(X_new, y_new, 'r-', label='Polynomial Regression')
plt.xlabel('X')
plt.ylabel('y')
plt.legend()
plt.show()



Q3. Create your Django app in which after running the server, you should see on the browser,
the text “Hello! I am learning Django”, which you defined in the index view



To create a simple Django app that displays "Hello! I am learning Django" in the browser, you can follow these steps:

1. **Install Django:**
   Make sure you have Django installed. If not, you can install it using:

   ```bash
   pip install django
   ```

2. **Create a Django Project:**
   Create a new Django project using the following command:

   ```bash
   django-admin startproject myproject
   ```

   Replace `myproject` with the desired project name.

3. **Create a Django App:**
   Navigate to your project folder and create a new app:

   ```bash
   cd myproject
   python manage.py startapp myapp
   ```

   Replace `myapp` with the desired app name.

4. **Define the View:**
   In your `views.py` file inside the `myapp` folder, define the view that will render the "Hello! I am learning Django" text. Open `myapp/views.py` and add the following code:

   ```python
   from django.shortcuts import render
   from django.http import HttpResponse

   def index(request):
       return HttpResponse("Hello! I am learning Django")
   ```

5. **Configure URLs:**
   In your `myapp` folder, create a file named `urls.py` if it doesn't exist. Add the following code to define the URL pattern for the `index` view:

   ```python
   from django.urls import path
   from .views import index

   urlpatterns = [
       path('', index, name='index'),
   ]
   ```

6. **Include App URLs in Project URLs:**
   In your `myproject/urls.py` file, include the URLs of your app by adding the following code:

   ```python
   from django.contrib import admin
   from django.urls import include, path

   urlpatterns = [
       path('admin/', admin.site.urls),
       path('', include('myapp.urls')),
   ]
   ```

7. **Run the Development Server:**
   Start the development server using the following command:

   ```bash
   python manage.py runserver
   ```

8. **Visit the Browser:**
   Open your web browser and go to http://127.0.0.1:8000/. You should see the text "Hello! I am learning Django" displayed on the page.

That's it! You've created a simple Django app with a single view displaying the specified text. You can now extend your app by adding more views, templates, and functionalities as needed.