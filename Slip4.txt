Q1. Write a Java Program to implement Factory method for Pizza Store with createPizza(),
orederPizza(), prepare(), Bake(), cut(), box(). Use this to create variety of pizzaâ€™s
like NyStyleCheesePizza, ChicagoStyleCheesePizza etc.

// Pizza interface
interface Pizza {
    void prepare();

    void bake();

    void cut();

    void box();
}

// Concrete implementation of Ny Style Cheese Pizza
class NyStyleCheesePizza implements Pizza {
    @Override
    public void prepare() {
        System.out.println("Preparing NY style cheese pizza");
    }

    @Override
    public void bake() {
        System.out.println("Baking NY style cheese pizza");
    }

    @Override
    public void cut() {
        System.out.println("Cutting NY style cheese pizza");
    }

    @Override
    public void box() {
        System.out.println("Boxing NY style cheese pizza");
    }
}

// Concrete implementation of Chicago Style Cheese Pizza
class ChicagoStyleCheesePizza implements Pizza {
    @Override
    public void prepare() {
        System.out.println("Preparing Chicago style cheese pizza");
    }

    @Override
    public void bake() {
        System.out.println("Baking Chicago style cheese pizza");
    }

    @Override
    public void cut() {
        System.out.println("Cutting Chicago style cheese pizza");
    }

    @Override
    public void box() {
        System.out.println("Boxing Chicago style cheese pizza");
    }
}

// Abstract Pizza Store class with a factory method createPizza
abstract class PizzaStore {
    // Factory method
    abstract Pizza createPizza(String type);

    // Order pizza method
    public Pizza orderPizza(String type) {
        Pizza pizza = createPizza(type);

        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();

        return pizza;
    }
}

// Concrete implementation of Ny Pizza Store
class NyPizzaStore extends PizzaStore {
    @Override
    Pizza createPizza(String type) {
        if (type.equalsIgnoreCase("cheese")) {
            return new NyStyleCheesePizza();
        }
        // Add more pizza types as needed
        return null;
    }
}

// Concrete implementation of Chicago Pizza Store
class ChicagoPizzaStore extends PizzaStore {
    @Override
    Pizza createPizza(String type) {
        if (type.equalsIgnoreCase("cheese")) {
            return new ChicagoStyleCheesePizza();
        }
        // Add more pizza types as needed
        return null;
    }
}

public class PizzaStoreExample {
    public static void main(String[] args) {
        // Create a Ny Pizza Store
        PizzaStore nyPizzaStore = new NyPizzaStore();
        // Order a cheese pizza from the Ny Pizza Store
        Pizza nyCheesePizza = nyPizzaStore.orderPizza("cheese");

        System.out.println();

        // Create a Chicago Pizza Store
        PizzaStore chicagoPizzaStore = new ChicagoPizzaStore();
        // Order a cheese pizza from the Chicago Pizza Store
        Pizza chicagoCheesePizza = chicagoPizzaStore.orderPizza("cheese");
    }
}

Q2. Write a python program to Implement Simple Linear Regression for predicting house
price.

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Generating some example data
np.random.seed(42)
house_sizes = np.random.randint(100, 250, 100)
house_prices = 50 * house_sizes + np.random.normal(0, 1000, 100)

# Reshape the data for scikit-learn
X = house_sizes.reshape(-1, 1)
y = house_prices

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model on the training set
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Plot the data points and the regression line
plt.scatter(X_test, y_test, color='black')
plt.plot(X_test, y_pred, color='blue', linewidth=3)
plt.title('Simple Linear Regression: House Price Prediction')
plt.xlabel('House Size')
plt.ylabel('House Price')
plt.show()

# Calculate and print the Mean Squared Error
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

Q3. Create a Node.js file that will convert the output "Hello World!" into upper-case
letters.

// uppercaseConverter.js

// Output "Hello World!" in upper-case letters
console.log("Hello World!".toUpperCase());
