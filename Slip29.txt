Q1. Write a Java Program to implement State Pattern for Gumball Machine.
Create instance variable that holds current state from there, we just need to handle all
actions, behaviors and state transition that can happen


// State interface
interface State {
    void insertQuarter();
    void ejectQuarter();
    void turnCrank();
    void dispense();
}

// Concrete State: HasQuarterState
class HasQuarterState implements State {
    private GumballMachine gumballMachine;

    public HasQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    @Override
    public void insertQuarter() {
        System.out.println("You can't insert another quarter");
    }

    @Override
    public void ejectQuarter() {
        System.out.println("Quarter returned");
        gumballMachine.setState(gumballMachine.getNoQuarterState());
    }

    @Override
    public void turnCrank() {
        System.out.println("You turned...");
        gumballMachine.setState(gumballMachine.getSoldState());
    }

    @Override
    public void dispense() {
        System.out.println("No gumball dispensed");
    }
}

// Concrete State: NoQuarterState
class NoQuarterState implements State {
    private GumballMachine gumballMachine;

    public NoQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    @Override
    public void insertQuarter() {
        System.out.println("You inserted a quarter");
        gumballMachine.setState(gumballMachine.getHasQuarterState());
    }

    @Override
    public void ejectQuarter() {
        System.out.println("You haven't inserted a quarter");
    }

    @Override
    public void turnCrank() {
        System.out.println("You turned, but there's no quarter");
    }

    @Override
    public void dispense() {
        System.out.println("You need to pay first");
    }
}

// Concrete State: SoldState
class SoldState implements State {
    private GumballMachine gumballMachine;

    public SoldState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    @Override
    public void insertQuarter() {
        System.out.println("Please wait, we're already giving you a gumball");
    }

    @Override
    public void ejectQuarter() {
        System.out.println("Sorry, you already turned the crank");
    }

    @Override
    public void turnCrank() {
        System.out.println("Turning twice doesn't get you another gumball!");
    }

    @Override
    public void dispense() {
        gumballMachine.releaseBall();
        if (gumballMachine.getCount() > 0) {
            gumballMachine.setState(gumballMachine.getNoQuarterState());
        } else {
            System.out.println("Oops, out of gumballs!");
            gumballMachine.setState(gumballMachine.getSoldOutState());
        }
    }
}

// Concrete State: SoldOutState
class SoldOutState implements State {
    private GumballMachine gumballMachine;

    public SoldOutState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    @Override
    public void insertQuarter() {
        System.out.println("Sorry, the machine is sold out");
    }

    @Override
    public void ejectQuarter() {
        System.out.println("You can't eject, you haven't inserted a quarter yet");
    }

    @Override
    public void turnCrank() {
        System.out.println("You turned, but there are no gumballs");
    }

    @Override
    public void dispense() {
        System.out.println("No gumball dispensed");
    }
}

// Context: GumballMachine
class GumballMachine {
    private State soldOutState;
    private State noQuarterState;
    private State hasQuarterState;
    private State soldState;

    private State state;
    private int count = 0;

    public GumballMachine(int numGumballs) {
        soldOutState = new SoldOutState(this);
        noQuarterState = new NoQuarterState(this);
        hasQuarterState = new HasQuarterState(this);
        soldState = new SoldState(this);

        this.count = numGumballs;
        if (numGumballs > 0) {
            state = noQuarterState;
        } else {
            state = soldOutState;
        }
    }

    public void insertQuarter() {
        state.insertQuarter();
    }

    public void ejectQuarter() {
        state.ejectQuarter();
    }

    public void turnCrank() {
        state.turnCrank();
        state.dispense();
    }

    void setState(State state) {
        this.state = state;
    }

    void releaseBall() {
        System.out.println("A gumball comes rolling out the slot...");
        if (count != 0) {
            count = count - 1;
        }
    }

    int getCount() {
        return count;
    }

    State getSoldOutState() {
        return soldOutState;
    }

    State getNoQuarterState() {
        return noQuarterState;
    }

    State getHasQuarterState() {
        return hasQuarterState;
    }

    State getSoldState() {
        return soldState;
    }
}

// Client code
public class GumballMachineTestDrive {
    public static void main(String[] args) {
        GumballMachine gumballMachine = new GumballMachine(5);

        System.out.println(gumballMachine);

        gumballMachine.insertQuarter();
        gumballMachine.turnCrank();

        System.out.println(gumballMachine);

        gumballMachine.insertQuarter();
        gumballMachine.ejectQuarter();
        gumballMachine.turnCrank();

        System.out.println(gumballMachine);
    }
}



Q2. Write a python program to implement Decision Tree whether or not to play Tennis


from sklearn import tree

# Define the features (Outlook, Temperature, Humidity, Wind)
features = [
    [0, 85, 85, 0],  # Outlook: 0 (Sunny), Temperature: 85, Humidity: 85, Wind: 0 (Weak)
    [0, 80, 90, 1],  # Outlook: 0 (Sunny), Temperature: 80, Humidity: 90, Wind: 1 (Strong)
    [1, 83, 78, 0],  # Outlook: 1 (Overcast), Temperature: 83, Humidity: 78, Wind: 0 (Weak)
    [2, 70, 96, 0],  # Outlook: 2 (Rain), Temperature: 70, Humidity: 96, Wind: 0 (Weak)
    [2, 68, 80, 0],  # Outlook: 2 (Rain), Temperature: 68, Humidity: 80, Wind: 0 (Weak)
    [2, 65, 70, 1],  # Outlook: 2 (Rain), Temperature: 65, Humidity: 70, Wind: 1 (Strong)
    [1, 64, 65, 1],  # Outlook: 1 (Overcast), Temperature: 64, Humidity: 65, Wind: 1 (Strong)
    [0, 72, 95, 0],  # Outlook: 0 (Sunny), Temperature: 72, Humidity: 95, Wind: 0 (Weak)
    [0, 69, 70, 0],  # Outlook: 0 (Sunny), Temperature: 69, Humidity: 70, Wind: 0 (Weak)
    [2, 75, 80, 0],  # Outlook: 2 (Rain), Temperature: 75, Humidity: 80, Wind: 0 (Weak)
    [0, 75, 70, 1],  # Outlook: 0 (Sunny), Temperature: 75, Humidity: 70, Wind: 1 (Strong)
    [1, 72, 90, 1],  # Outlook: 1 (Overcast), Temperature: 72, Humidity: 90, Wind: 1 (Strong)
    [1, 81, 75, 0],  # Outlook: 1 (Overcast), Temperature: 81, Humidity: 75, Wind: 0 (Weak)
    [2, 71, 91, 1]   # Outlook: 2 (Rain), Temperature: 71, Humidity: 91, Wind: 1 (Strong)
]

# Define the labels (1 for play, 0 for not play)
labels = [0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0]

# Create a decision tree classifier
clf = tree.DecisionTreeClassifier()

# Train the classifier
clf = clf.fit(features, labels)

# Predict whether to play tennis for a new set of conditions
new_data = [[0, 70, 80, 0]]  # Outlook: 0 (Sunny), Temperature: 70, Humidity: 80, Wind: 0 (Weak)
prediction = clf.predict(new_data)

# Print the prediction
if prediction[0] == 1:
    print("Yes, you can play tennis.")
else:
    print("No, it's not suitable for playing tennis.")




Q3. Create a clone of the “Hacker News” website.


Creating a clone of a website involves multiple steps, including designing the user interface, implementing the frontend and backend, setting up a database, and more. For simplicity, I'll provide a basic outline and code snippets to get you started with a Node.js backend using Express.

### Prerequisites:

1. **Node.js and npm:**
   Make sure you have Node.js and npm installed. You can download them from [https://nodejs.org/](https://nodejs.org/).

2. **Initialize a Node.js project:**
   Create a new folder for your project, navigate to it in the terminal, and run:

   ```bash
   npm init -y
   ```

   This command creates a `package.json` file.

### Backend (Node.js with Express)

1. **Install Express:**
   Install Express, a web framework for Node.js:

   ```bash
   npm install express
   ```

2. **Create an `app.js` file:**
   Create a file named `app.js` for your Express application.

   ```javascript
   // app.js
   const express = require('express');
   const app = express();
   const PORT = 3000;

   app.get('/', (req, res) => {
       res.send('Hello, Hacker News Clone!');
   });

   app.listen(PORT, () => {
       console.log(`Server is running on http://localhost:${PORT}`);
   });
   ```

3. **Run the Express app:**
   Start your Express app by running:

   ```bash
   node app.js
   ```

   Visit [http://localhost:3000](http://localhost:3000) in your browser to see the "Hello, Hacker News Clone!" message.

### Frontend (HTML, CSS, JavaScript)

1. **Create HTML and CSS files:**
   Create an `index.html` file for your homepage and a `styles.css` file for styling.

   ```html
   <!-- public/index.html -->
   <!DOCTYPE html>
   <html lang="en">
   <head>
       <meta charset="UTF-8">
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <link rel="stylesheet" href="/styles.css">
       <title>Hacker News Clone</title>
   </head>
   <body>
       <!-- Header, Navigation, and List of Posts go here -->
       <!-- You can use JavaScript to fetch and display posts dynamically -->
       <script src="/app.js"></script>
   </body>
   </html>
   ```

   ```css
   /* public/styles.css */
   body {
       font-family: Arial, sans-serif;
   }

   /* Add more styles as needed */
   ```

2. **Create JavaScript file:**
   Use JavaScript to fetch and display posts dynamically.

   ```javascript
   // public/app.js
   // Fetch posts from a server (you'll need a backend for this)
   fetch('/api/posts')
       .then(response => response.json())
       .then(posts => {
           // Process and display posts on the page
       })
       .catch(error => console.error('Error fetching posts:', error));
   ```

3. **Serve static files with Express:**
   Update your `app.js` file to serve static files.

   ```javascript
   // app.js
   const express = require('express');
   const app = express();
   const path = require('path');
   const PORT = 3000;

   // Serve static files from the 'public' folder
   app.use(express.static(path.join(__dirname, 'public')));

   app.get('/', (req, res) => {
       res.sendFile(path.join(__dirname, 'public', 'index.html'));
   });

   app.listen(PORT, () => {
       console.log(`Server is running on http://localhost:${PORT}`);
   });
   ```

Now you have a basic structure for your Hacker News clone using Node.js with Express. Remember that this is just a starting point, and you'll need to add more features, improve the design, and handle user authentication and authorization for a complete clone. Additionally, ensure compliance with legal and ethical considerations when creating a clone of an existing website.
