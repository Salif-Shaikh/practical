Q1. Write a Java Program to implement Decorator Pattern for interface Car to define the
assemble() method and then decorate it to Sports car and Luxury Car

// Car interface
interface Car {
    void assemble();
}

// Concrete implementation of Car
class BasicCar implements Car {
    @Override
    public void assemble() {
        System.out.println("Basic Car");
    }
}

// Decorator abstract class
abstract class CarDecorator implements Car {
    protected Car car;

    public CarDecorator(Car car) {
        this.car = car;
    }

    @Override
    public void assemble() {
        car.assemble();
    }
}

// Concrete decorator for Sports Car
class SportsCar extends CarDecorator {
    public SportsCar(Car car) {
        super(car);
    }

    @Override
    public void assemble() {
        super.assemble();
        System.out.println("Adding Sports Car features");
    }
}

// Concrete decorator for Luxury Car
class LuxuryCar extends CarDecorator {
    public LuxuryCar(Car car) {
        super(car);
    }

    @Override
    public void assemble() {
        super.assemble();
        System.out.println("Adding Luxury Car features");
    }
}

// Client code
public class DecoratorPatternExample {
    public static void main(String[] args) {
        // Creating a basic car
        Car basicCar = new BasicCar();
        basicCar.assemble();

        System.out.println("\nAdding Sports Car features:");
        // Decorating with SportsCar
        Car sportsCar = new SportsCar(new BasicCar());
        sportsCar.assemble();

        System.out.println("\nAdding Luxury Car features:");
        // Decorating with LuxuryCar
        Car luxuryCar = new LuxuryCar(new BasicCar());
        luxuryCar.assemble();

        System.out.println("\nAdding Sports Car and Luxury Car features:");
        // Decorating with both SportsCar and LuxuryCar
        Car sportsLuxuryCar = new LuxuryCar(new SportsCar(new BasicCar()));
        sportsLuxuryCar.assemble();
    }
}





Q2. Write a python program to make Categorical values in numeric format for a given
dataset

	import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Assuming you have a dataset (replace 'your_dataset.csv' with your actual dataset)
file_path = 'your_dataset.csv'

# Read the dataset into a Pandas DataFrame
df = pd.read_csv(file_path)

# Display the original dataset
print("Original Dataset:")
print(df)

# Initialize LabelEncoder
label_encoder = LabelEncoder()

# Iterate over each column in the DataFrame
for column in df.columns:
    # Check if the column has object dtype (categorical)
    if df[column].dtype == 'object':
        # Use LabelEncoder to convert categorical values to numeric format
        df[column] = label_encoder.fit_transform(df[column])

# Display the dataset with numeric values for categorical columns
print("\nDataset with Numeric Values for Categorical Columns:")
print(df)




Q3. Create a Simple Web Server using node js.

const http = require('http');

// Create a server
const server = http.createServer((req, res) => {
  // Set the response header
  res.writeHead(200, {'Content-Type': 'text/plain'});

  // Send a response to the client
  res.end('Hello, World!\n');
});

// Specify the port to listen on
const port = 3000;

// Start the server
server.listen(port, () => {
  console.log(`Server running at http://localhost:${port}/`);
});
 