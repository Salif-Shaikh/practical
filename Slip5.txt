Q3. Write a Java Program to implement Adapter pattern for Enumeration iterator

import java.util.Enumeration;
import java.util.Iterator;

// EnumerationToIteratorAdapter is the adapter class
class EnumerationToIteratorAdapter implements Iterator<Object> {
    private Enumeration<Object> enumeration;

    // Constructor takes an Enumeration to adapt
    public EnumerationToIteratorAdapter(Enumeration<Object> enumeration) {
        this.enumeration = enumeration;
    }

    // Check if there is a next element in the Enumeration
    @Override
    public boolean hasNext() {
        return enumeration.hasMoreElements();
    }

    // Return the next element in the Enumeration
    @Override
    public Object next() {
        return enumeration.nextElement();
    }

    // The remove operation is not supported in Enumeration
    @Override
    public void remove() {
        throw new UnsupportedOperationException("remove() operation is not supported.");
    }
}

public class AdapterPatternExample {
    public static void main(String[] args) {
        // Create an Enumeration (e.g., from a Vector)
        java.util.Vector<Object> vector = new java.util.Vector<>();
        vector.add("One");
        vector.add("Two");
        vector.add("Three");
        Enumeration<Object> enumeration = vector.elements();

        // Use the Adapter to convert Enumeration to Iterator
        Iterator<Object> iterator = new EnumerationToIteratorAdapter(enumeration);

        // Iterate and print elements using Iterator interface
        while (iterator.hasNext()) {
            System.out.println(iterator.next());
        }
    }
}

Q2. Write a python program to implement Multiple Linear Regression for given dataset.

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Sample dataset
data = {
    'Feature1': [1, 2, 3, 4, 5],
    'Feature2': [2, 3, 5, 7, 11],
    'Target': [5, 8, 12, 15, 20]
}

# Create a DataFrame from the sample data
df = pd.DataFrame(data)

# Split the data into features (X) and target variable (y)
X = df[['Feature1', 'Feature2']]
y = df['Target']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model on the training set
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Print the coefficients and intercept
print('Coefficients:', model.coef_)
print('Intercept:', model.intercept_)

# Calculate and print the Mean Squared Error
mse = mean_squared_error(y_test, y_pred)
print('Mean Squared Error:', mse)

Q3. Using nodejs create a web page to read two file names from user and append contents
of first file into second file.

**npm init -y
**npm install express

const express = require('express');
const fs = require('fs');
const path = require('path');
const bodyParser = require('body-parser');

const app = express();
const port = 3000;

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static('public'));

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.post('/append-files', (req, res) => {
  const { firstFileName, secondFileName } = req.body;

  if (!firstFileName || !secondFileName) {
    return res.status(400).send('Please provide both file names.');
  }

  const firstFilePath = path.join(__dirname, 'uploads', firstFileName);
  const secondFilePath = path.join(__dirname, 'uploads', secondFileName);

  // Read the contents of the first file
  fs.readFile(firstFilePath, 'utf8', (err, data) => {
    if (err) {
      return res.status(500).send('Error reading the first file.');
    }

    // Append the contents of the first file to the second file
    fs.appendFile(secondFilePath, data, (err) => {
      if (err) {
        return res.status(500).send('Error appending contents to the second file.');
      }

      return res.send('Contents appended successfully!');
    });
  });
});

app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});

**Create a public directory in the project root and add an HTML file named index.html inside it:
<!-- public/index.html -->

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>File Content Appender</title>
</head>
<body>
  <h2>File Content Appender</h2>
  <form action="/append-files" method="post">
    <label for="firstFileName">First File Name:</label>
    <input type="text" id="firstFileName" name="firstFileName" required>

    <label for="secondFileName">Second File Name:</label>
    <input type="text" id="secondFileName" name="secondFileName" required>

    <button type="submit">Append Contents</button>
  </form>
</body>
</html>

**RUN: node app.js
