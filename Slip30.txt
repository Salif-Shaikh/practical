Q1. Write a Java Program to implement Factory method for Pizza Store with createPizza(),
orederPizza(), prepare(), Bake(), cut(), box(). Use this to create variety of pizzaâ€™s
like NyStyleCheesePizza, ChicagoStyleCheesePizza etc.

// Pizza interface
interface Pizza {
    void prepare();
    void bake();
    void cut();
    void box();
}

// Concrete Pizza: NyStyleCheesePizza
class NyStyleCheesePizza implements Pizza {
    @Override
    public void prepare() {
        System.out.println("Preparing New York style cheese pizza");
    }

    @Override
    public void bake() {
        System.out.println("Baking New York style cheese pizza");
    }

    @Override
    public void cut() {
        System.out.println("Cutting New York style cheese pizza");
    }

    @Override
    public void box() {
        System.out.println("Boxing New York style cheese pizza");
    }
}

// Concrete Pizza: ChicagoStyleCheesePizza
class ChicagoStyleCheesePizza implements Pizza {
    @Override
    public void prepare() {
        System.out.println("Preparing Chicago style cheese pizza");
    }

    @Override
    public void bake() {
        System.out.println("Baking Chicago style cheese pizza");
    }

    @Override
    public void cut() {
        System.out.println("Cutting Chicago style cheese pizza");
    }

    @Override
    public void box() {
        System.out.println("Boxing Chicago style cheese pizza");
    }
}

// Pizza Store
abstract class PizzaStore {
    // Factory method
    protected abstract Pizza createPizza(String type);

    // Order pizza
    public Pizza orderPizza(String type) {
        Pizza pizza = createPizza(type);

        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();

        return pizza;
    }
}

// Concrete Pizza Store: NyPizzaStore
class NyPizzaStore extends PizzaStore {
    @Override
    protected Pizza createPizza(String type) {
        if ("cheese".equalsIgnoreCase(type)) {
            return new NyStyleCheesePizza();
        }
        // Add more pizza types as needed
        return null;
    }
}

// Concrete Pizza Store: ChicagoPizzaStore
class ChicagoPizzaStore extends PizzaStore {
    @Override
    protected Pizza createPizza(String type) {
        if ("cheese".equalsIgnoreCase(type)) {
            return new ChicagoStyleCheesePizza();
        }
        // Add more pizza types as needed
        return null;
    }
}

// Client code
public class PizzaTestDrive {
    public static void main(String[] args) {
        PizzaStore nyPizzaStore = new NyPizzaStore();
        PizzaStore chicagoPizzaStore = new ChicagoPizzaStore();

        Pizza nyCheesePizza = nyPizzaStore.orderPizza("cheese");
        System.out.println("Ethan ordered a " + nyCheesePizza.getClass().getSimpleName() + "\n");

        Pizza chicagoCheesePizza = chicagoPizzaStore.orderPizza("cheese");
        System.out.println("Joel ordered a " + chicagoCheesePizza.getClass().getSimpleName());
    }
}





Q2. Write a python program to implement Linear SVM

# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Load the Iris dataset (you can replace this with your own dataset)
iris = datasets.load_iris()
X = iris.data[:, :2]  # Take the first two features for simplicity
y = iris.target

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a linear SVM classifier
clf = SVC(kernel='linear')

# Train the classifier
clf.fit(X_train, y_train)

# Make predictions on the test set
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Plot the decision boundary
def plot_decision_boundary(X, y, model, title):
    h = .02
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1

    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)

    plt.contourf(xx, yy, Z, cmap=plt.cm.coolwarm, alpha=0.8)
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.coolwarm, edgecolors='k')
    plt.title(title)
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.show()

# Plot decision boundary for training data
plot_decision_boundary(X_train, y_train, clf, 'Linear SVM Decision Boundary (Training Data)')

# Plot decision boundary for test data
plot_decision_boundary(X_test, y_test, clf, 'Linear SVM Decision Boundary (Test Data)')



Q3. Implement Login System using Django. 


To implement a simple login system using Django, you can follow these steps:

### Step 1: Install Django

Make sure you have Django installed. If not, you can install it using the following command:

```bash
pip install django
```

### Step 2: Create a Django Project

Create a new Django project and navigate to the project directory:

```bash
django-admin startproject myproject
cd myproject
```

### Step 3: Create a Django App

Create a new Django app within your project:

```bash
python manage.py startapp myapp
```

### Step 4: Define Models

In your `myapp/models.py` file, define a model for user authentication:

```python
# myapp/models.py
from django.db import models
from django.contrib.auth.models import AbstractUser

class CustomUser(AbstractUser):
    # You can add additional fields here if needed
    pass
```

### Step 5: Update Settings

In your `myproject/settings.py` file, add your app to the `INSTALLED_APPS` and specify the custom user model:

```python
# myproject/settings.py
INSTALLED_APPS = [
    # ...
    'myapp',
]

AUTH_USER_MODEL = 'myapp.CustomUser'
```

### Step 6: Create Migrations and Apply

Run the following commands to create and apply migrations:

```bash
python manage.py makemigrations
python manage.py migrate
```

### Step 7: Create Forms

In your `myapp/forms.py` file, create a login form:

```python
# myapp/forms.py
from django import forms
from django.contrib.auth.forms import AuthenticationForm

class CustomAuthenticationForm(AuthenticationForm):
    # You can customize the form here if needed
    pass
```

### Step 8: Create Views

In your `myapp/views.py` file, create views for login:

```python
# myapp/views.py
from django.contrib.auth.views import LoginView
from django.urls import reverse_lazy

class CustomLoginView(LoginView):
    template_name = 'myapp/login.html'
    form_class = CustomAuthenticationForm
    success_url = reverse_lazy('home')  # Redirect to home page after login
```

### Step 9: Create Templates

Create a `myapp/templates/myapp/login.html` template file for your login page:

```html
<!-- myapp/templates/myapp/login.html -->
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
    <h2>Login</h2>
    <form method="post" action="{% url 'login' %}">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Login</button>
    </form>
</body>
</html>
```

### Step 10: Update URLs

In your `myapp/urls.py` file, define the URLs:

```python
# myapp/urls.py
from django.urls import path
from .views import CustomLoginView

urlpatterns = [
    path('login/', CustomLoginView.as_view(), name='login'),
    # Add more URLs as needed
]
```

Include the app's URLs in the project's `myproject/urls.py`:

```python
# myproject/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('myapp/', include('myapp.urls')),
]
```

### Step 11: Run the Development Server

Run the development server:

```bash
python manage.py runserver
```

Visit [http://localhost:8000/myapp/login/](http://localhost:8000/myapp/login/) to access the login page.

This is a basic example of a login system in Django. Depending on your requirements, you may need to add more features, such as user registration, password recovery, and user account management.

